const faker = require('faker');

class RandomData {
  formatDate(date) {
    return (((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + date.getFullYear()).trim();
  }

  generatePassedDate() {
    return this.formatDate(faker.date.past(18));
  }

  generateDateOfTomorrow() {
    var tomorrow = new Date();
    tomorrow.setDate(new Date().getDate()+1); 
    return this.formatDate(tomorrow);
  }

  getTodayDate() {
    var today = new Date();
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
    var yyyy = today.getFullYear();
    return dd + '/' + mm + '/' + yyyy;
  }

  validateDoBFormat(dob) {
    // validate DoB in format of dd/mm/yyyy. Also checks if the date is a valid date, e.g., 30/02/2020, or 32/01/2020 are invalid and wouldn't pass the validation.
    return new RegExp(/^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[13-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/).test(dob)
  }
  
  generateFirstNameWithLocale(locale) {
    faker.locale = locale;
    return faker.name.firstName();
  }

  generateLastNameWithLocale(locale) {
    faker.locale = locale;
    return faker.name.lastName();
  }

  generateAddressWithLocale(locale) {
    faker.locale = locale;
    // country is allowed to be in English only
    let address = {
      addressLine1: faker.address.streetAddress(),
      addressLine2: faker.address.streetAddress(),
      suburbOrCity: faker.address.city(),
      stateOrProvince: faker.address.state(),
      postalCode: faker.address.zipCode('####'),
    };
    faker.locale = 'en_US';
    address['country'] = randomData.generateRandomCountryName();
    return address;
  }

  /*
   * faker was used to generate random country name. 
   * But COBRA requirements define the country names to be displayed in a weird manner such as 'United Arab Emirates, The', 'Cocos (Keeling) Islands, The', 'United States Of America, The', etc,
   * which differ from the conventional country names that are generated by faker.
   * Details about the requirement on the country names, refer to AAMS-1395. 
   * This function below to work around this problem, to just select a country randomly for a list of countries. 
   */
  generateRandomCountryName() {
    const commonlyUsed = ['Australia', 'China', 'Indonesia', 'India', 'New Zealand', 'Singapore', 'Viet Nam'];
    return faker.random.arrayElement(commonlyUsed);
  }

  addRandomLeadingTrailingSpaces(value) {
    // value could be comma separated multiple items
    let vals = value.split(',');
    let valsWithSpaces = [];
    for (var i = 0; i < vals.length; i++) {
      const valWithSpaces = new Array(faker.random.number({min: 1, max: 9})).join(' ') + vals[i] + new Array(faker.random.number({min: 1, max: 9})).join(' ');
      valsWithSpaces.push(valWithSpaces);
    }
    return valsWithSpaces.concat(',');
  }

  addRandomLeadingTrailingSpacesInDataTableValues(data) {
    let updatedData = {};
    for (let key of Object.keys(data)) {
      updatedData[key] = this.addRandomLeadingTrailingSpaces(data[key]);
    }
    return updatedData;
  }

  generateRandomString(length, type) {
      let aB = '';
      let randamString = '';
      if (type == 'Alphanumeric') {
          aB = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
      } else if (type == 'Numeric') {
          aB = '0123456789';
      } else if (type == 'letter') {
          aB = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
      } else if (type == 'String') {
          aB = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,!@#%&*()_-â€“+=\\?{}[]/\"':`~|";
      }
      for (let i = length; i > 0; --i) {
          randamString += aB[Math.floor(Math.random() * aB.length)];
      }
      return randamString;
  }

  isNullOrEmpty(str) {
    return str === null || str.match(/^ *$/) !== null;
  }
}

const randomData = new RandomData();
export { randomData };